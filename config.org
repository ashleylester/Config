#+TITLE: Emacs Configuration
#+SETUPFILE: theme-readtheorg.setup 

* Introduction

To run the snippets in this Orgmode file, use the following command in ~init.el~

#+BEGIN_EXAMPLE emacs-lisp
(org-babel-load-file "~.emacs.d/config.org")
#+END_EXAMPLE

* Shortcuts

Shortcut keys, user defined, are specified here.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'eval-buffer)
#+END_SRC

A table of common shortcuts, useful as a reminder.

| Name    | Function                                     |
|---------+----------------------------------------------|
| M-n W   | Choose weaver in .Rmd (requires polymode)    |
| M-n w   | Weave using chosen weaver in .Rmd files      |
| M-n E   | Choose exporter in polymode such as html     |
| M-n e   | Export using chosen exporter                 |
| C-c C-p | Move to the previous heading in Orgmode      |
| C-c C-n | Move to the next heading in Orgmode          |
| C-s     | Swiper search and C-n to goto next           |
| M-q     | Reflow the current paragraph                 |
| C-c C-v | Browse URL of buffer (in Firefox for example |

A table of common commands to enter into the mode line that might not be wanted
straight away but nonetheless are useful to write down.

| Name                    | Function                                    |
|-------------------------+---------------------------------------------|
| toggle-frame-fullscreen | Fullscreen mode (also works by hitting F11) |
|                         |                                             |

* Package archives

The package archives Elpa and Melpa are used as the sources. Elpa is the
official source and Melpa is the unofficial source, Melpa containing many more
packages. Elpa defaults the connection to http; in this case, it is replaced
with a secure connection. Therefore the package-archives variable is set to nil
in order that we can define our own.

#+BEGIN_SRC emacs-lisp
  (setq package-archives nil)
  (defvar elpa '("elpa" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives elpa t)
  (add-to-list 'package-archives melpa t)
#+END_SRC

The packages need to bring back the latest content unless there is an archive
already present.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa"))
    (package-refresh-contents))
#+END_SRC

Packages are better managed by the use-package package. This enables automatic
package installation on new machines and encourages package options to be
defined in the same part of the file that the package is declared in. This is
the only package that is going to be installed in this section; each other
package will be defined and set up under the relevant headings.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+END_SRC

* Utilities and general behaviour

Packages for moving around Emacs, enhancing functionality such as searching for
functions, reminders of shortcuts when C-c or C-x or M-x is pressed, and so on.

The counsel package helps find mode line functions.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind*
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-x" . counsel-M-x)))
#+END_SRC

Personal preference is to put hard line breaks in documents when they flow over
the 80 character limit.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook
    (lambda() (set-fill-column 80)))
#+END_SRC

The which key package reminds us of the available key combinations after C-c,
M-x, or C-x is pressed.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
               :ensure t
               :config
               (which-key-mode))
#+END_SRC

It is a good idea to set up a backups folder so that working directories are not
muddled with extra files.

#+BEGIN_SRC emacs-lisp
  (setq init-dir "~/.emacs.d/")
  (defvar --backup-directory (concat init-dir "backups"))

  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
#+END_SRC

Ace Window is good for window management and replaces the functionality of the
default C-x o.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (define-key global-map (kbd "C-x o") 'ace-window))
#+END_SRC

* Programming environments

Declared here are packages and options for managing different programming
languages especially R, Clojure, Haskell, Python, LaTeX and Emacs Lisp. The
Magit package is also declared and managed here.

The readthedocs theme makes a nice-looking html page from our orgmode files. To
use the theme ~#+SETUPFILE: theme-readtheorg.setup~ needs to be declared as a
property at the top of the file.

#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p "~/.emacs.d/theme-readtheorg.setup")
    (url-copy-file "http://bit.ly/2uC8FRm"
                   "~/.emacs.d/theme-readtheorg.setup"))
  (setq org-html-htmlize-output-type 'css)
#+END_SRC

The htmlize package creates blocks of syntax-highlighted code in html exports
from Orgmode files based on the current Emacs theme.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :config
    (add-hook 'ess-mode-hook
          (lambda () 
            (ess-toggle-underscore nil))))
#+END_SRC

Compiling and running an .Rmd file requires a package called polymode. The
system must have pandoc installed for knitting to html.

#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

Completion is done using company. Auto-complete is an alternative.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode))
#+END_SRC

* Graphics and text

Packages and options to modify the look and feel, and packages to change how
text is displayed, is managed here. The newline variables are set to nil; this
prevents Emacs from adding new lines to the end of files
automatically. Otherwise, the options are to hide the scroll bar, tool bar, and
other graphical stuff.

#+BEGIN_SRC emacs-lisp
  (setq mode-require-final-newline nil)
  (setq require-final-newline nil)
  (setq org-src-fontify-natively t)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (global-linum-mode)
  (setq mouse-wheel-progressive-scroll-speed nil)
  (setq ring-bell-function 'ignore)
  (setq frame-resize-pixelwise t)
#+END_SRC

Relative line numbers make it easier to skip backwards and forwards in a
document. The line the cursor is on displays the absolute line number in the
document. 

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
               :ensure t
               :config
               (linum-relative-global-mode)
               (setq linum-relative-current-symbol ""))
#+END_SRC

Two themes are declared here, occasionally swap between them depending on
feeling.

#+BEGIN_SRC emacs-lisp
  ;;(use-package arjen-grey-theme
  ;;             :ensure t
  ;;             :config
  ;;             (load-theme 'arjen-grey t))
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample-flat))
    :defer t
    :ensure t)
#+END_SRC

The Iosevka font is unusual in that it is a tall font, which is not perhaps 
suited to widescreen monitors. However, the thin profile makes it very 
readable, and more windows can be added going across the screen than would 
otherwise be the case.

The Fantasque font takes some inspiration from Comic Sans and from Helvetica,
along with some interesting cursive aspects to create something fun.

The Terminus font focuses on crispness and is intended for long sessions where
sub-pixel smoothing might not be the best thing for the tired programmer. For
Windows, the ttf package that is used has a different name; therefore, this line
is included as well. If in doubt, the font name is gotten by typing M-x
set-frame-font and the font name is one of the hypen-delimited fields.

#+BEGIN_SRC emacs-lisp
  ;; (set-frame-font "Iosevka-12")
  ;; (set-frame-font "Fantasque Sans Mono-12")
  (set-frame-font "xos4 Terminus-12")
  ;; (set-frame-font "Terminus (TTF)-12")
#+END_SRC

Powerline controls how the mode line is themed.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
#+END_SRC

Spaceline is a powerline-inspired package that uses some of the Spacemacs
inspired theming and offers a similar theme to Spacemacs.

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-emacs-theme))
#+END_SRC

* Cloud storage

Dropbox integration helps sync the config, and other org mode files such as task
lists, between computers.

#+BEGIN_SRC emacs-lisp
  (use-package dropbox
    :ensure t)
#+END_SRC
